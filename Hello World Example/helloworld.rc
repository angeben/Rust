// HelloWorld.rc Hello World First example program
// It prints the hello world string to console
// Compilar: rustc helloworld.rc
// Ejecutar: ./helloworld


use std::env;
use std::io;

struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}

fn main() {

    // Tipos
    const INTEGER: i32 = -20;
    const UNUMBER: u32 = 7;
    const FLOATING_NUMBER: f32 = 20.5;
    const NAME: &str = "John";

    println!("Int = {} \nUnsigned = {} \nFloat = {} \nString = {} \n", INTEGER, UNUMBER, FLOATING_NUMBER, NAME);

    // Enumerados
    #[derive(Debug)] // Para el ptint de los enumerados
    enum Status {
        ACTIVE,
        INACTIVE,
    }

    let active = Status::ACTIVE;
    let inactive = Status::INACTIVE;

    // While
    let mut i = 0;
    while i < 2 {
        if i == 0 {
            println!("{:?}", active)
        }
        else {println!("{:?}", inactive)}
        i+=1;
    }

    // For
    let mut sum = 0;
    for i in 1..11 {
        sum += i;
    }    
    println!("\nSum: {}", sum);

    let numbers: &[i64] = &vec![1, 2, 3, 4, 5];

    for (i, item) in numbers.iter().enumerate() {
        println!("value: - {} - Index: {}", item,i);
    }

    println!("\nInput Parameters");
    let cmd_line = env::args();
    println!("No of elements in arguments is: {}",cmd_line.len()); 
    //print total number of values passed
    for arg in cmd_line {
        println!("[{}]",arg); //print all values passed as commandline arguments
   }

    // Entrada y switch
    let mut line = String::new();
    println!("\nEnter a numer from 1 to 7:");    
    let _bytes = io::stdin().read_line(&mut line).unwrap();
    //println!("No of bytes read: {}", b1);
    let day = 1;
    match day{
        1 => println!("MONDAY"),
        2 => println!("TUESDAY"),
        3 => println!("WEDNESDAY"),
        4 => println!("THURDSDAY"),
        5 => println!("FRIDAY"),
        6 => println!("SATURDAY"),
        7 => println!("SATURDAY"),
        _ => println!("INVALID DAY"),
    }

    // Tuplas
    let employee: (u32, &str, bool) = (1, "John", false);
    println!("\n{:?}", employee); // normal print
    //println!("{:#?}", employee); // pretty print
    println!("{}", status_employee(employee));

    // Structs
    let mut user1 = User {
        active: true,
        username: String::from("someusername123"),
        email: String::from("someone@example.com"),
        sign_in_count: 1,
    }; 
    user1.email = String::from("anotheremail@example.com");
    if user1.active {
        println!("\n{}, logins = {}", user1.username, user1.sign_in_count);
    }
}

fn status_employee(emp:(u32, &str, bool)) -> bool {
    return emp.2;
}